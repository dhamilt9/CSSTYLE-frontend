{"ast":null,"code":"(function () {\n  var Browsers,\n      OldSelector,\n      Prefixer,\n      Selector,\n      utils,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  OldSelector = require('./old-selector');\n  Prefixer = require('./prefixer');\n  Browsers = require('./browsers');\n  utils = require('./utils');\n\n  Selector = function (_super) {\n    __extends(Selector, _super);\n\n    function Selector(name, prefixes, all) {\n      this.name = name;\n      this.prefixes = prefixes;\n      this.all = all;\n      this.regexpCache = {};\n    }\n\n    Selector.prototype.check = function (rule) {\n      if (rule.selector.indexOf(this.name) !== -1) {\n        return !!rule.selector.match(this.regexp());\n      } else {\n        return false;\n      }\n    };\n\n    Selector.prototype.prefixed = function (prefix) {\n      return this.name.replace(/^([^\\w]*)/, '$1' + prefix);\n    };\n\n    Selector.prototype.regexp = function (prefix) {\n      var name;\n\n      if (this.regexpCache[prefix]) {\n        return this.regexpCache[prefix];\n      }\n\n      name = prefix ? this.prefixed(prefix) : this.name;\n      return this.regexpCache[prefix] = RegExp(\"(^|[^:\\\"'=])\" + utils.escapeRegexp(name), \"gi\");\n    };\n\n    Selector.prototype.possible = function () {\n      return Browsers.prefixes();\n    };\n\n    Selector.prototype.prefixeds = function (rule) {\n      var prefix, prefixeds, _i, _len, _ref;\n\n      if (rule._autoprefixerPrefixeds) {\n        return rule._autoprefixerPrefixeds;\n      }\n\n      prefixeds = {};\n      _ref = this.possible();\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        prefix = _ref[_i];\n        prefixeds[prefix] = this.replace(rule.selector, prefix);\n      }\n\n      return rule._autoprefixerPrefixeds = prefixeds;\n    };\n\n    Selector.prototype.already = function (rule, prefixeds, prefix) {\n      var before, index, key, prefixed, some;\n      index = rule.parent.index(rule) - 1;\n\n      while (index >= 0) {\n        before = rule.parent.rules[index];\n\n        if (before.type !== 'rule') {\n          return false;\n        }\n\n        some = false;\n\n        for (key in prefixeds) {\n          prefixed = prefixeds[key];\n\n          if (before.selector === prefixed) {\n            if (prefix === key) {\n              return true;\n            } else {\n              some = true;\n              break;\n            }\n          }\n        }\n\n        if (!some) {\n          return false;\n        }\n\n        index -= 1;\n      }\n\n      return false;\n    };\n\n    Selector.prototype.replace = function (selector, prefix) {\n      return selector.replace(this.regexp(), '$1' + this.prefixed(prefix));\n    };\n\n    Selector.prototype.add = function (rule, prefix) {\n      var cloned, prefixeds;\n      prefixeds = this.prefixeds(rule);\n\n      if (this.already(rule, prefixeds, prefix)) {\n        return;\n      }\n\n      cloned = this.clone(rule, {\n        selector: prefixeds[prefix]\n      });\n      return rule.parent.insertBefore(rule, cloned);\n    };\n\n    Selector.prototype.old = function (prefix) {\n      return new OldSelector(this, prefix);\n    };\n\n    return Selector;\n  }(Prefixer);\n\n  module.exports = Selector;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}