{"ast":null,"code":"(function () {\n  var OldSelector;\n\n  OldSelector = function () {\n    function OldSelector(selector, prefix) {\n      var _i, _len, _ref;\n\n      this.prefix = prefix;\n      this.prefixed = selector.prefixed(this.prefix);\n      this.regexp = selector.regexp(this.prefix);\n      this.prefixeds = [];\n      _ref = selector.possible();\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        prefix = _ref[_i];\n        this.prefixeds.push([selector.prefixed(prefix), selector.regexp(prefix)]);\n      }\n\n      this.unprefixed = selector.name;\n      this.nameRegexp = selector.regexp();\n    }\n\n    OldSelector.prototype.isHack = function (rule) {\n      var before, index, regexp, rules, some, string, _i, _len, _ref, _ref1;\n\n      index = rule.parent.index(rule) + 1;\n      rules = rule.parent.rules;\n\n      while (index < rules.length) {\n        before = rules[index].selector;\n\n        if (!before) {\n          return true;\n        }\n\n        if (before.indexOf(this.unprefixed) !== -1 && before.match(this.nameRegexp)) {\n          return false;\n        }\n\n        some = false;\n        _ref = this.prefixeds;\n\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          _ref1 = _ref[_i], string = _ref1[0], regexp = _ref1[1];\n\n          if (before.indexOf(string) !== -1 && before.match(regexp)) {\n            some = true;\n            break;\n          }\n        }\n\n        if (!some) {\n          return true;\n        }\n\n        index += 1;\n      }\n\n      return true;\n    };\n\n    OldSelector.prototype.check = function (rule) {\n      if (rule.selector.indexOf(this.prefixed) === -1) {\n        return false;\n      }\n\n      if (!rule.selector.match(this.regexp)) {\n        return false;\n      }\n\n      if (this.isHack(rule)) {\n        return false;\n      }\n\n      return true;\n    };\n\n    return OldSelector;\n  }();\n\n  module.exports = OldSelector;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}