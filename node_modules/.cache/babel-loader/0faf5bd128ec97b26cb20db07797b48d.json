{"ast":null,"code":"(function () {\n  var OldValue,\n      Prefixer,\n      Value,\n      utils,\n      vendor,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  Prefixer = require('./prefixer');\n  OldValue = require('./old-value');\n  utils = require('./utils');\n  vendor = require('postcss/lib/vendor');\n\n  Value = function (_super) {\n    __extends(Value, _super);\n\n    function Value() {\n      return Value.__super__.constructor.apply(this, arguments);\n    }\n\n    Value.save = function (prefixes, decl) {\n      var already, cloned, prefix, prefixed, propPrefix, rule, trimmed, value, _ref, _results;\n\n      _ref = decl._autoprefixerValues;\n      _results = [];\n\n      for (prefix in _ref) {\n        value = _ref[prefix];\n\n        if (value === decl.value) {\n          continue;\n        }\n\n        propPrefix = vendor.prefix(decl.prop);\n\n        if (propPrefix === prefix) {\n          _results.push(decl.value = value);\n        } else if (propPrefix === '-pie-') {\n          continue;\n        } else {\n          prefixed = prefixes.prefixed(decl.prop, prefix);\n          rule = decl.parent;\n\n          if (rule.every(function (i) {\n            return i.prop !== prefixed;\n          })) {\n            trimmed = value.replace(/\\s+/, ' ');\n            already = rule.some(function (i) {\n              return i.prop === decl.prop && i.value.replace(/\\s+/, ' ') === trimmed;\n            });\n\n            if (!already) {\n              cloned = this.clone(decl, {\n                value: value\n              });\n\n              _results.push(decl.parent.insertBefore(decl, cloned));\n            } else {\n              _results.push(void 0);\n            }\n          } else {\n            _results.push(void 0);\n          }\n        }\n      }\n\n      return _results;\n    };\n\n    Value.prototype.check = function (decl) {\n      var value;\n      value = decl.value;\n\n      if (value.indexOf(this.name) !== -1) {\n        return !!value.match(this.regexp());\n      } else {\n        return false;\n      }\n    };\n\n    Value.prototype.regexp = function () {\n      return this.regexpCache || (this.regexpCache = utils.regexp(this.name));\n    };\n\n    Value.prototype.replace = function (string, prefix) {\n      return string.replace(this.regexp(), '$1' + prefix + '$2');\n    };\n\n    Value.prototype.add = function (decl, prefix) {\n      var value;\n      decl._autoprefixerValues || (decl._autoprefixerValues = {});\n      value = decl._autoprefixerValues[prefix] || decl.value;\n      value = this.replace(value, prefix);\n\n      if (value) {\n        return decl._autoprefixerValues[prefix] = value;\n      }\n    };\n\n    Value.prototype.old = function (prefix) {\n      return new OldValue(prefix + this.name);\n    };\n\n    return Value;\n  }(Prefixer);\n\n  module.exports = Value;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}