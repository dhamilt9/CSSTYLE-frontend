{"ast":null,"code":"(function () {\n  var Placeholder,\n      Selector,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  Selector = require('../selector');\n\n  Placeholder = function (_super) {\n    __extends(Placeholder, _super);\n\n    function Placeholder() {\n      return Placeholder.__super__.constructor.apply(this, arguments);\n    }\n\n    Placeholder.names = ['::placeholder'];\n\n    Placeholder.prototype.possible = function () {\n      return Placeholder.__super__.possible.apply(this, arguments).concat('-moz- old');\n    };\n\n    Placeholder.prototype.prefixed = function (prefix) {\n      if ('-webkit-' === prefix) {\n        return '::-webkit-input-placeholder';\n      } else if ('-ms-' === prefix) {\n        return ':-ms-input-placeholder';\n      } else if ('-moz- old' === prefix) {\n        return ':-moz-placeholder';\n      } else {\n        return \"::\" + prefix + \"placeholder\";\n      }\n    };\n\n    return Placeholder;\n  }(Selector);\n\n  module.exports = Placeholder;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}