{"ast":null,"code":"var Container = require('./container');\n\nvar Declaration = require('./declaration');\n\nvar list = require('./list'); // CSS rule like “a { }”\n\n\nvar Rule = function (super$0) {\n  var DP$0 = Object.defineProperty;\n\n  var MIXIN$0 = function MIXIN$0(t, s) {\n    for (var p in s) {\n      if (s.hasOwnProperty(p)) {\n        DP$0(t, p, Object.getOwnPropertyDescriptor(s, p));\n      }\n    }\n\n    return t;\n  };\n\n  \"use strict\";\n\n  MIXIN$0(Rule, super$0);\n\n  function Rule(defaults) {\n    this.type = 'rule';\n    super$0.call(this, defaults);\n  }\n\n  Rule.prototype = Object.create(super$0.prototype, {\n    \"constructor\": {\n      \"value\": Rule,\n      \"configurable\": true,\n      \"writable\": true\n    },\n    selectors: {\n      \"get\": selectors$get$0,\n      \"set\": selectors$set$0,\n      \"configurable\": true,\n      \"enumerable\": true\n    }\n  });\n  DP$0(Rule, \"prototype\", {\n    \"configurable\": false,\n    \"enumerable\": false,\n    \"writable\": false\n  }); // Different style for empty and non-empty rules\n\n  Rule.prototype.styleType = function () {\n    return this.type + (this.decls.length ? '-body' : '-empty');\n  };\n\n  Rule.prototype.defaultStyle = function (type) {\n    if (type == 'rule-body') {\n      return {\n        between: ' ',\n        after: this.defaultAfter()\n      };\n    } else {\n      return {\n        between: ' ',\n        after: ''\n      };\n    }\n  }; // Shortcut to get selectors as array\n\n\n  function selectors$get$0() {\n    return list.comma(this.selector);\n  }\n\n  function selectors$set$0(values) {\n    this.selector = values.join(', ');\n  } // Stringify rule\n\n\n  Rule.prototype.stringify = function (builder) {\n    this.stringifyBlock(builder, this.stringifyRaw('selector') + this.style().between + '{');\n  };\n\n  return Rule;\n}(Container.WithDecls);\n\nmodule.exports = Rule;","map":null,"metadata":{},"sourceType":"script"}