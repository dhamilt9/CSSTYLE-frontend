{"ast":null,"code":"var Node = require('./node');\n\nvar vendor = require('./vendor'); // CSS declaration like “color: black” in rules\n\n\nvar Declaration = function (super$0) {\n  var DP$0 = Object.defineProperty;\n\n  var MIXIN$0 = function MIXIN$0(t, s) {\n    for (var p in s) {\n      if (s.hasOwnProperty(p)) {\n        DP$0(t, p, Object.getOwnPropertyDescriptor(s, p));\n      }\n    }\n\n    return t;\n  };\n\n  \"use strict\";\n\n  MIXIN$0(Declaration, super$0);\n\n  function Declaration(defaults) {\n    this.type = 'decl';\n    super$0.call(this, defaults);\n  }\n\n  Declaration.prototype = Object.create(super$0.prototype, {\n    \"constructor\": {\n      \"value\": Declaration,\n      \"configurable\": true,\n      \"writable\": true\n    }\n  });\n  DP$0(Declaration, \"prototype\", {\n    \"configurable\": false,\n    \"enumerable\": false,\n    \"writable\": false\n  });\n\n  Declaration.prototype.defaultStyle = function () {\n    return {\n      before: \"\\n    \",\n      between: ': '\n    };\n  }; // Stringify declaration\n\n\n  Declaration.prototype.stringify = function (builder, semicolon) {\n    var style = this.style();\n    if (style.before) builder(style.before);\n    var string = this.prop + style.between + this.stringifyRaw('value');\n\n    if (this.important) {\n      string += this._important || ' !important';\n    }\n\n    if (semicolon) string += ';';\n    builder(string, this);\n  }; // Clean `before` and `between` property in clone to copy it from new\n  // parent rule\n\n\n  Declaration.prototype.clone = function () {\n    var overrides = arguments[0];\n    if (overrides === void 0) overrides = {};\n    var cloned = super$0.prototype.clone.call(this, overrides);\n    delete cloned.before;\n    delete cloned.between;\n    return cloned;\n  };\n\n  return Declaration;\n}(Node);\n\nmodule.exports = Declaration;","map":null,"metadata":{},"sourceType":"script"}