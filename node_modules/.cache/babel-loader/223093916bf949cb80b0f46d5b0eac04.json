{"ast":null,"code":"(function () {\n  var Browsers, utils;\n  utils = require('./utils');\n\n  Browsers = function () {\n    Browsers.prefixes = function () {\n      var data, i, name;\n\n      if (this.prefixesCache) {\n        return this.prefixesCache;\n      }\n\n      data = require('../data/browsers');\n      return this.prefixesCache = utils.uniq(function () {\n        var _results;\n\n        _results = [];\n\n        for (name in data) {\n          i = data[name];\n\n          _results.push(i.prefix);\n        }\n\n        return _results;\n      }()).sort(function (a, b) {\n        return b.length - a.length;\n      });\n    };\n\n    Browsers.withPrefix = function (value) {\n      if (!this.prefixesRegexp) {\n        this.prefixesRegexp = RegExp(\"\" + this.prefixes().join('|'));\n      }\n\n      return this.prefixesRegexp.test(value);\n    };\n\n    function Browsers(data, requirements) {\n      this.data = data;\n      this.selected = this.parse(requirements);\n    }\n\n    Browsers.prototype.parse = function (requirements) {\n      var selected;\n\n      if (!(requirements instanceof Array)) {\n        requirements = [requirements];\n      }\n\n      selected = [];\n      requirements.map(function (_this) {\n        return function (req) {\n          var i, match, name, _ref;\n\n          _ref = _this.requirements;\n\n          for (name in _ref) {\n            i = _ref[name];\n\n            if (match = req.match(i.regexp)) {\n              selected = selected.concat(i.select.apply(_this, match.slice(1)));\n              return;\n            }\n          }\n\n          return utils.error(\"Unknown browser requirement `\" + req + \"`\");\n        };\n      }(this));\n      return utils.uniq(selected);\n    };\n\n    Browsers.prototype.aliases = {\n      fx: 'firefox',\n      ff: 'firefox',\n      ios: 'ios_saf',\n      explorer: 'ie',\n      blackberry: 'bb',\n      explorermobile: 'ie_mob',\n      operamini: 'op_mini',\n      operamobile: 'op_mob',\n      chromeandroid: 'and_chr',\n      firefoxandroid: 'and_ff'\n    };\n    Browsers.prototype.requirements = {\n      none: {\n        regexp: /^none$/i,\n        select: function select() {\n          return [];\n        }\n      },\n      lastVersions: {\n        regexp: /^last (\\d+) versions?$/i,\n        select: function select(versions) {\n          return this.browsers(function (data) {\n            if (data.minor) {\n              return [];\n            } else {\n              return data.versions.slice(0, versions);\n            }\n          });\n        }\n      },\n      lastByBrowser: {\n        regexp: /^last (\\d+) (\\w+) versions?$/i,\n        select: function select(versions, browser) {\n          var data;\n          data = this.byName(browser);\n          return data.versions.slice(0, versions).map(function (v) {\n            return \"\" + data.name + \" \" + v;\n          });\n        }\n      },\n      globalStatistics: {\n        regexp: /^> (\\d+(\\.\\d+)?)%$/,\n        select: function select(popularity) {\n          return this.browsers(function (data) {\n            if (data.minor) {\n              return [];\n            } else {\n              return data.versions.filter(function (version, i) {\n                return data.popularity[i] > popularity;\n              });\n            }\n          });\n        }\n      },\n      newerThen: {\n        regexp: /^(\\w+) (>=?)\\s*([\\d\\.]+)/,\n        select: function select(browser, sign, version) {\n          var data, filter;\n          data = this.byName(browser);\n          version = parseFloat(version);\n\n          if (sign === '>') {\n            filter = function filter(v) {\n              return v > version;\n            };\n          } else if (sign === '>=') {\n            filter = function filter(v) {\n              return v >= version;\n            };\n          }\n\n          return data.versions.filter(filter).map(function (v) {\n            return \"\" + data.name + \" \" + v;\n          });\n        }\n      },\n      esr: {\n        regexp: /^(firefox|ff|fx) esr$/i,\n        select: function select() {\n          return ['firefox 24'];\n        }\n      },\n      direct: {\n        regexp: /^(\\w+) ([\\d\\.]+)$/,\n        select: function select(browser, version) {\n          var data, first, last;\n          data = this.byName(browser);\n          version = parseFloat(version);\n          last = data.future ? data.future[0] : data.versions[0];\n          first = data.versions[data.versions.length - 1];\n\n          if (version > last) {\n            version = last;\n          } else if (version < first) {\n            version = first;\n          }\n\n          return [\"\" + data.name + \" \" + version];\n        }\n      }\n    };\n\n    Browsers.prototype.browsers = function (criteria) {\n      var browser, data, selected, versions, _ref;\n\n      selected = [];\n      _ref = this.data;\n\n      for (browser in _ref) {\n        data = _ref[browser];\n        versions = criteria(data).map(function (version) {\n          return \"\" + browser + \" \" + version;\n        });\n        selected = selected.concat(versions);\n      }\n\n      return selected;\n    };\n\n    Browsers.prototype.prefix = function (browser) {\n      var name, version, _ref;\n\n      _ref = browser.split(' '), name = _ref[0], version = _ref[1];\n\n      if (name === 'opera' && parseFloat(version) >= 15) {\n        return '-webkit-';\n      } else {\n        return this.data[name].prefix;\n      }\n    };\n\n    Browsers.prototype.isSelected = function (browser) {\n      return this.selected.indexOf(browser) !== -1;\n    };\n\n    Browsers.prototype.byName = function (name) {\n      var data;\n      name = name.toLowerCase();\n      name = this.aliases[name] || name;\n      data = this.data[name];\n\n      if (!data) {\n        utils.error(\"Unknown browser \" + browser);\n      }\n\n      data.name = name;\n      return data;\n    };\n\n    return Browsers;\n  }();\n\n  module.exports = Browsers;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}