{"ast":null,"code":"(function () {\n  var Declaration,\n      FlexDirection,\n      flexSpec,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  flexSpec = require('./flex-spec');\n  Declaration = require('../declaration');\n\n  FlexDirection = function (_super) {\n    __extends(FlexDirection, _super);\n\n    function FlexDirection() {\n      return FlexDirection.__super__.constructor.apply(this, arguments);\n    }\n\n    FlexDirection.names = ['flex-direction', 'box-direction', 'box-orient'];\n\n    FlexDirection.prototype.normalize = function (prop) {\n      return 'flex-direction';\n    };\n\n    FlexDirection.prototype.insert = function (decl, prefix, prefixes) {\n      var already, cloned, dir, orient, spec, value, _ref;\n\n      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];\n\n      if (spec === 2009) {\n        already = decl.parent.some(function (i) {\n          return i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction';\n        });\n\n        if (already) {\n          return;\n        }\n\n        value = decl.value;\n        orient = value.indexOf('row') !== -1 ? 'horizontal' : 'vertical';\n        dir = value.indexOf('reverse') !== -1 ? 'reverse' : 'normal';\n        cloned = this.clone(decl);\n        cloned.prop = prefix + 'box-orient';\n        cloned.value = orient;\n\n        if (this.needCascade(decl)) {\n          cloned.before = this.calcBefore(prefixes, decl, prefix);\n        }\n\n        decl.parent.insertBefore(decl, cloned);\n        cloned = this.clone(decl);\n        cloned.prop = prefix + 'box-direction';\n        cloned.value = dir;\n\n        if (this.needCascade(decl)) {\n          cloned.before = this.calcBefore(prefixes, decl, prefix);\n        }\n\n        return decl.parent.insertBefore(decl, cloned);\n      } else {\n        return FlexDirection.__super__.insert.apply(this, arguments);\n      }\n    };\n\n    FlexDirection.prototype.old = function (prop, prefix) {\n      var spec, _ref;\n\n      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];\n\n      if (spec === 2009) {\n        return [prefix + 'box-orient', prefix + 'box-direction'];\n      } else {\n        return FlexDirection.__super__.old.apply(this, arguments);\n      }\n    };\n\n    return FlexDirection;\n  }(Declaration);\n\n  module.exports = FlexDirection;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}