{"ast":null,"code":"(function () {\n  var DisplayFlex,\n      OldDisplayFlex,\n      OldValue,\n      Value,\n      flexSpec,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  flexSpec = require('./flex-spec');\n  OldValue = require('../old-value');\n  Value = require('../value');\n\n  OldDisplayFlex = function (_super) {\n    __extends(OldDisplayFlex, _super);\n\n    function OldDisplayFlex(name) {\n      this.name = name;\n    }\n\n    OldDisplayFlex.prototype.check = function (value) {\n      return value === this.name;\n    };\n\n    return OldDisplayFlex;\n  }(OldValue);\n\n  DisplayFlex = function (_super) {\n    __extends(DisplayFlex, _super);\n\n    DisplayFlex.names = ['display-flex', 'inline-flex'];\n\n    function DisplayFlex(name, prefixes) {\n      DisplayFlex.__super__.constructor.apply(this, arguments);\n\n      if (name === 'display-flex') {\n        this.name = 'flex';\n      }\n    }\n\n    DisplayFlex.prototype.check = function (decl) {\n      return decl.value === this.name;\n    };\n\n    DisplayFlex.prototype.prefixed = function (prefix) {\n      var spec, _ref;\n\n      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];\n      return prefix + (spec === 2009 ? this.name === 'flex' ? 'box' : 'inline-box' : spec === 2012 ? this.name === 'flex' ? 'flexbox' : 'inline-flexbox' : spec === 'final' ? this.name : void 0);\n    };\n\n    DisplayFlex.prototype.replace = function (string, prefix) {\n      return this.prefixed(prefix);\n    };\n\n    DisplayFlex.prototype.old = function (prefix) {\n      var prefixed;\n      prefixed = this.prefixed(prefix);\n\n      if (prefixed) {\n        return new OldValue(prefixed);\n      }\n    };\n\n    return DisplayFlex;\n  }(Value);\n\n  module.exports = DisplayFlex;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}