{"ast":null,"code":"(function () {\n  var Declaration,\n      FlexBasis,\n      flexSpec,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  flexSpec = require('./flex-spec');\n  Declaration = require('../declaration');\n\n  FlexBasis = function (_super) {\n    __extends(FlexBasis, _super);\n\n    function FlexBasis() {\n      return FlexBasis.__super__.constructor.apply(this, arguments);\n    }\n\n    FlexBasis.names = ['flex-basis', 'flex-preferred-size'];\n\n    FlexBasis.prototype.normalize = function () {\n      return 'flex-basis';\n    };\n\n    FlexBasis.prototype.prefixed = function (prop, prefix) {\n      var spec, _ref;\n\n      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];\n\n      if (spec === 2012) {\n        return prefix + 'flex-preferred-size';\n      } else {\n        return FlexBasis.__super__.prefixed.apply(this, arguments);\n      }\n    };\n\n    FlexBasis.prototype.set = function (decl, prefix) {\n      var spec, _ref;\n\n      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];\n\n      if (spec === 2012 || spec === 'final') {\n        return FlexBasis.__super__.set.apply(this, arguments);\n      }\n    };\n\n    return FlexBasis;\n  }(Declaration);\n\n  module.exports = FlexBasis;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}