{"ast":null,"code":"// Methods to parse list and split it to array\nvar list = {\n  // Split string to array by separator symbols with function and inside strings\n  // cheching\n  split: function split(string, separators, last) {\n    var S_ITER$0 = typeof Symbol !== 'undefined' && Symbol.iterator || '@@iterator';\n\n    function GET_ITER$0(v) {\n      if (v) {\n        if (Array.isArray(v)) return 0;\n        var f;\n        if (typeof v === 'object' && typeof (f = v[S_ITER$0]) === 'function') return f.call(v);\n        if (v + '' === '[object Generator]') return v;\n      }\n\n      throw new Error(v + ' is not iterable');\n    }\n\n    ;\n    var $D$0;\n    var $D$1;\n    var $D$2;\n    var array = [];\n    var current = '';\n    var split = false;\n    var func = 0;\n    var quote = false;\n    var escape = false;\n\n    for (var i = 0; i < string.length; i++) {\n      var letter = string[i];\n\n      if (quote) {\n        if (escape) {\n          escape = false;\n        } else if (letter == '\\\\') {\n          escape = true;\n        } else if (letter == quote) {\n          quote = false;\n        }\n      } else if (letter == '\"' || letter == \"'\") {\n        quote = letter;\n      } else if (letter == '(') {\n        func += 1;\n      } else if (letter == ')') {\n        if (func > 0) func -= 1;\n      } else if (func === 0) {\n        $D$0 = GET_ITER$0(separators);\n        $D$2 = $D$0 === 0;\n        $D$1 = $D$2 ? separators.length : void 0;\n\n        for (var separator; $D$2 ? $D$0 < $D$1 : !($D$1 = $D$0[\"next\"]())[\"done\"];) {\n          separator = $D$2 ? separators[$D$0++] : $D$1[\"value\"];\n          if (letter == separator) split = true;\n        }\n\n        ;\n        $D$0 = $D$1 = $D$2 = void 0;\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim());\n        current = '';\n        split = false;\n      } else {\n        current += letter;\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim());\n    return array;\n  },\n  // Split list devided by space:\n  //\n  //   list.space('a b') #=> ['a', 'b']\n  //\n  // It check for fuction and strings:\n  //\n  //   list.space('calc(1px + 1em) \"b c\"') #=> ['calc(1px + 1em)', '\"b c\"']\n  space: function space(string) {\n    return this.split(string, [' ', \"\\n\", \"\\t\"]);\n  },\n  // Split list devided by comma\n  //\n  //   list.comma('a, b') #=> ['a', 'b']\n  //\n  // It check for fuction and strings:\n  //\n  //   list.comma('rgba(0, 0, 0, 0) white') #=> ['rgba(0, 0, 0, 0)', '\"white\"']\n  comma: function comma(string) {\n    return this.split(string, [','], true);\n  }\n};\nmodule.exports = list;","map":null,"metadata":{},"sourceType":"script"}