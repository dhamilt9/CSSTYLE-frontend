{"ast":null,"code":"(function () {\n  var BreakInside,\n      Declaration,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  Declaration = require('../declaration');\n\n  BreakInside = function (_super) {\n    __extends(BreakInside, _super);\n\n    function BreakInside() {\n      return BreakInside.__super__.constructor.apply(this, arguments);\n    }\n\n    BreakInside.names = ['break-inside', 'page-break-inside', 'column-break-inside'];\n\n    BreakInside.prototype.prefixed = function (prop, prefix) {\n      if (prefix === '-webkit-') {\n        return prefix + 'column-break-inside';\n      } else if (prefix === '-moz-') {\n        return 'page-break-inside';\n      } else {\n        return BreakInside.__super__.prefixed.apply(this, arguments);\n      }\n    };\n\n    BreakInside.prototype.normalize = function () {\n      return 'break-inside';\n    };\n\n    BreakInside.prototype.set = function (decl, prefix) {\n      if (decl.value === 'avoid-column' || decl.value === 'avoid-page') {\n        decl.value = 'avoid';\n      }\n\n      return BreakInside.__super__.set.apply(this, arguments);\n    };\n\n    BreakInside.prototype.insert = function (decl, prefix, prefixes) {\n      if (decl.value === 'avoid-region') {} else if (decl.value === 'avoid-page' && prefix === '-webkit-') {} else {\n        return BreakInside.__super__.insert.apply(this, arguments);\n      }\n    };\n\n    return BreakInside;\n  }(Declaration);\n\n  module.exports = BreakInside;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}