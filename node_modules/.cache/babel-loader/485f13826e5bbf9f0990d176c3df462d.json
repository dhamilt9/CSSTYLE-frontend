{"ast":null,"code":"(function () {\n  var capitalize, names, prefix;\n\n  capitalize = function capitalize(str) {\n    return str.slice(0, 1).toUpperCase() + str.slice(1);\n  };\n\n  names = {\n    ie: 'IE',\n    ie_mob: 'IE Mobile',\n    ios_saf: 'iOS',\n    op_mini: 'Opera Mini',\n    op_mob: 'Opera Mobile',\n    and_chr: 'Chrome for Android',\n    and_ff: 'Firefox for Android'\n  };\n\n  prefix = function prefix(name, transition, prefixes) {\n    var out;\n    out = '  ' + name + (transition ? '*' : '') + ': ';\n    out += prefixes.map(function (i) {\n      return i.replace(/^-(.*)-$/g, '$1');\n    }).join(', ');\n    out += \"\\n\";\n    return out;\n  };\n\n  module.exports = function (prefixes) {\n    var atrules, browser, data, list, name, needTransition, out, props, selector, selectors, string, transitionProp, useTransition, value, values, version, versions, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;\n\n    if (prefixes.browsers.selected.length === 0) {\n      return \"No browsers selected\";\n    }\n\n    versions = [];\n    _ref = prefixes.browsers.selected;\n\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      browser = _ref[_i];\n      _ref1 = browser.split(' '), name = _ref1[0], version = _ref1[1];\n      name = names[name] || capitalize(name);\n\n      if (versions[name]) {\n        versions[name].push(version);\n      } else {\n        versions[name] = [version];\n      }\n    }\n\n    out = \"Browsers:\\n\";\n\n    for (browser in versions) {\n      list = versions[browser];\n      list = list.sort(function (a, b) {\n        return parseFloat(b) - parseFloat(a);\n      });\n      out += '  ' + browser + ': ' + list.join(', ') + \"\\n\";\n    }\n\n    atrules = '';\n    _ref2 = prefixes.add;\n\n    for (name in _ref2) {\n      data = _ref2[name];\n\n      if (name[0] === '@' && data.prefixes) {\n        atrules += prefix(name, false, data.prefixes);\n      }\n    }\n\n    if (atrules !== '') {\n      out += \"\\nAt-Rules:\\n\" + atrules;\n    }\n\n    selectors = '';\n    _ref3 = prefixes.add.selectors;\n\n    for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {\n      selector = _ref3[_j];\n\n      if (selector.prefixes) {\n        selectors += prefix(selector.name, false, selector.prefixes);\n      }\n    }\n\n    if (selectors !== '') {\n      out += \"\\nSelectors:\\n\" + selectors;\n    }\n\n    values = '';\n    props = '';\n    useTransition = false;\n    needTransition = (_ref4 = prefixes.add.transition) != null ? _ref4.prefixes : void 0;\n    _ref5 = prefixes.add;\n\n    for (name in _ref5) {\n      data = _ref5[name];\n\n      if (name[0] !== '@' && data.prefixes) {\n        transitionProp = needTransition && prefixes.data[name].transition;\n\n        if (transitionProp) {\n          useTransition = true;\n        }\n\n        props += prefix(name, transitionProp, data.prefixes);\n      }\n\n      if (!data.values) {\n        continue;\n      }\n\n      if (prefixes.transitionProps.some(function (i) {\n        return i === name;\n      })) {\n        continue;\n      }\n\n      _ref6 = data.values;\n\n      for (_k = 0, _len2 = _ref6.length; _k < _len2; _k++) {\n        value = _ref6[_k];\n        string = prefix(value.name, false, value.prefixes);\n\n        if (values.indexOf(string) === -1) {\n          values += string;\n        }\n      }\n    }\n\n    if (useTransition) {\n      props += \"  * - can be used in transition\\n\";\n    }\n\n    if (props !== '') {\n      out += \"\\nProperties:\\n\" + props;\n    }\n\n    if (values !== '') {\n      out += \"\\nValues:\\n\" + values;\n    }\n\n    return out;\n  };\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}