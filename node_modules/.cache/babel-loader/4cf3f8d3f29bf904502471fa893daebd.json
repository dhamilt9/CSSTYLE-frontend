{"ast":null,"code":"(function () {\n  var Gradient,\n      OldValue,\n      Value,\n      isDirection,\n      list,\n      utils,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  OldValue = require('../old-value');\n  Value = require('../value');\n  utils = require('../utils');\n  list = require('postcss/lib/list');\n  isDirection = /top|left|right|bottom/gi;\n\n  Gradient = function (_super) {\n    __extends(Gradient, _super);\n\n    function Gradient() {\n      return Gradient.__super__.constructor.apply(this, arguments);\n    }\n\n    Gradient.names = ['linear-gradient', 'repeating-linear-gradient', 'radial-gradient', 'repeating-radial-gradient'];\n\n    Gradient.prototype.replace = function (string, prefix) {\n      return list.space(string).map(function (_this) {\n        return function (value) {\n          var after, args, close, params;\n\n          if (value.slice(0, +_this.name.length + 1 || 9e9) !== _this.name + '(') {\n            return value;\n          }\n\n          close = value.lastIndexOf(')');\n          after = value.slice(close + 1);\n          args = value.slice(_this.name.length + 1, +(close - 1) + 1 || 9e9);\n          params = list.comma(args);\n          params = _this.newDirection(params);\n\n          if (prefix === '-webkit- old') {\n            return _this.oldWebkit(value, args, params, after);\n          } else {\n            _this.convertDirection(params);\n\n            return prefix + _this.name + '(' + params.join(', ') + ')' + after;\n          }\n        };\n      }(this)).join(' ');\n    };\n\n    Gradient.prototype.directions = {\n      top: 'bottom',\n      left: 'right',\n      bottom: 'top',\n      right: 'left'\n    };\n    Gradient.prototype.oldDirections = {\n      'top': 'left bottom, left top',\n      'left': 'right top, left top',\n      'bottom': 'left top, left bottom',\n      'right': 'left top, right top',\n      'top right': 'left bottom, right top',\n      'top left': 'right bottom, left top',\n      'right top': 'left bottom, right top',\n      'right bottom': 'left top, right bottom',\n      'bottom right': 'left top, right bottom',\n      'bottom left': 'right top, left bottom',\n      'left top': 'right bottom, left top',\n      'left bottom': 'right top, left bottom'\n    };\n\n    Gradient.prototype.newDirection = function (params) {\n      var first, value;\n      first = params[0];\n\n      if (first.indexOf('to ') === -1 && isDirection.test(first)) {\n        first = first.split(' ');\n\n        first = function () {\n          var _i, _len, _results;\n\n          _results = [];\n\n          for (_i = 0, _len = first.length; _i < _len; _i++) {\n            value = first[_i];\n\n            _results.push(this.directions[value.toLowerCase()] || value);\n          }\n\n          return _results;\n        }.call(this);\n\n        params[0] = 'to ' + first.join(' ');\n      }\n\n      return params;\n    };\n\n    Gradient.prototype.oldWebkit = function (value, args, params, after) {\n      if (this.name !== 'linear-gradient') {\n        return value;\n      }\n\n      if (params[0] && params[0].indexOf('deg') !== -1) {\n        return value;\n      }\n\n      if (args.indexOf('-corner') !== -1) {\n        return value;\n      }\n\n      if (args.indexOf('-side') !== -1) {\n        return value;\n      }\n\n      params = this.oldDirection(params);\n      params = this.colorStops(params);\n      return '-webkit-gradient(linear, ' + params.join(', ') + ')' + after;\n    };\n\n    Gradient.prototype.convertDirection = function (params) {\n      if (params.length > 0) {\n        if (params[0].slice(0, 3) === 'to ') {\n          return params[0] = this.fixDirection(params[0]);\n        } else if (params[0].indexOf('deg') !== -1) {\n          return params[0] = this.fixAngle(params[0]);\n        } else if (params[0].indexOf(' at ') !== -1) {\n          return this.fixRadial(params);\n        }\n      }\n    };\n\n    Gradient.prototype.fixDirection = function (param) {\n      var value;\n      param = param.split(' ');\n      param.splice(0, 1);\n\n      param = function () {\n        var _i, _len, _results;\n\n        _results = [];\n\n        for (_i = 0, _len = param.length; _i < _len; _i++) {\n          value = param[_i];\n\n          _results.push(this.directions[value.toLowerCase()] || value);\n        }\n\n        return _results;\n      }.call(this);\n\n      return param.join(' ');\n    };\n\n    Gradient.prototype.roundFloat = function (float, digits) {\n      return parseFloat(float.toFixed(digits));\n    };\n\n    Gradient.prototype.fixAngle = function (param) {\n      param = parseFloat(param);\n      param = Math.abs(450 - param) % 360;\n      param = this.roundFloat(param, 3);\n      return \"\" + param + \"deg\";\n    };\n\n    Gradient.prototype.oldDirection = function (params) {\n      var direction;\n\n      if (params.length === 0) {\n        params;\n      }\n\n      if (params[0].indexOf('to ') !== -1) {\n        direction = params[0].replace(/^to\\s+/, '');\n        direction = this.oldDirections[direction];\n        params[0] = direction;\n        return params;\n      } else {\n        direction = this.oldDirections.bottom;\n        return [direction].concat(params);\n      }\n    };\n\n    Gradient.prototype.colorStops = function (params) {\n      return params.map(function (param, i) {\n        var color, match, position, _ref;\n\n        if (i === 0) {\n          return param;\n        }\n\n        _ref = list.space(param), color = _ref[0], position = _ref[1];\n\n        if (position == null) {\n          match = param.match(/^(.*\\))(\\d.*)$/);\n\n          if (match) {\n            color = match[1];\n            position = match[2];\n          }\n        }\n\n        if (position && position.indexOf(')') !== -1) {\n          color += ' ' + position;\n          position = void 0;\n        }\n\n        if (i === 1 && (position === void 0 || position === '0%')) {\n          return \"from(\" + color + \")\";\n        } else if (i === params.length - 1 && (position === void 0 || position === '100%')) {\n          return \"to(\" + color + \")\";\n        } else if (position) {\n          return \"color-stop(\" + position + \", \" + color + \")\";\n        } else {\n          return \"color-stop(\" + color + \")\";\n        }\n      });\n    };\n\n    Gradient.prototype.fixRadial = function (params) {\n      var first;\n      first = params[0].split(/\\s+at\\s+/);\n      return params.splice(0, 1, first[1], first[0]);\n    };\n\n    Gradient.prototype.old = function (prefix) {\n      var regexp, string, type;\n\n      if (prefix === '-webkit-') {\n        type = this.name === 'linear-gradient' ? 'linear' : 'radial';\n        string = '-gradient';\n        regexp = utils.regexp(\"-webkit-(\" + type + \"-gradient|gradient\\\\(\\\\s*\" + type + \")\", false);\n        return new OldValue(prefix + this.name, string, regexp);\n      } else {\n        return Gradient.__super__.old.apply(this, arguments);\n      }\n    };\n\n    return Gradient;\n  }(Value);\n\n  module.exports = Gradient;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}