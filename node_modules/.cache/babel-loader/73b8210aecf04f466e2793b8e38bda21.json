{"ast":null,"code":"(function () {\n  var Browsers, Declaration, Keyframes, Prefixes, Processor, Selector, Supports, Value, declsCache, utils, vendor;\n  utils = require('./utils');\n  vendor = require('postcss/lib/vendor');\n  Declaration = require('./declaration');\n  Processor = require('./processor');\n  Keyframes = require('./keyframes');\n  Supports = require('./supports');\n  Browsers = require('./browsers');\n  Selector = require('./selector');\n  Value = require('./value');\n  Selector.hack(require('./hacks/fullscreen'));\n  Selector.hack(require('./hacks/placeholder'));\n  Declaration.hack(require('./hacks/flex'));\n  Declaration.hack(require('./hacks/order'));\n  Declaration.hack(require('./hacks/filter'));\n  Declaration.hack(require('./hacks/flex-flow'));\n  Declaration.hack(require('./hacks/flex-grow'));\n  Declaration.hack(require('./hacks/flex-wrap'));\n  Declaration.hack(require('./hacks/align-self'));\n  Declaration.hack(require('./hacks/flex-basis'));\n  Declaration.hack(require('./hacks/align-items'));\n  Declaration.hack(require('./hacks/flex-shrink'));\n  Declaration.hack(require('./hacks/break-inside'));\n  Declaration.hack(require('./hacks/border-image'));\n  Declaration.hack(require('./hacks/align-content'));\n  Declaration.hack(require('./hacks/border-radius'));\n  Declaration.hack(require('./hacks/transform-decl'));\n  Declaration.hack(require('./hacks/flex-direction'));\n  Declaration.hack(require('./hacks/justify-content'));\n  Declaration.hack(require('./hacks/background-size'));\n  Value.hack(require('./hacks/gradient'));\n  Value.hack(require('./hacks/transition'));\n  Value.hack(require('./hacks/display-flex'));\n  Value.hack(require('./hacks/fill-available'));\n  Value.hack(require('./hacks/transform-value'));\n  declsCache = {};\n\n  Prefixes = function () {\n    function Prefixes(data, browsers, options) {\n      var _ref;\n\n      this.data = data;\n      this.browsers = browsers;\n      this.options = options != null ? options : {};\n      _ref = this.preprocess(this.select(this.data)), this.add = _ref[0], this.remove = _ref[1];\n      this.processor = new Processor(this);\n    }\n\n    Prefixes.prototype.transitionProps = ['transition', 'transition-property'];\n\n    Prefixes.prototype.cleaner = function () {\n      var empty;\n\n      if (!this.cleanerCache) {\n        if (this.browsers.selected.length) {\n          empty = new Browsers(this.browsers.data, []);\n          this.cleanerCache = new Prefixes(this.data, empty, this.options);\n        } else {\n          return this;\n        }\n      }\n\n      return this.cleanerCache;\n    };\n\n    Prefixes.prototype.select = function (list) {\n      var add, all, data, name, notes, selected;\n      selected = {\n        add: {},\n        remove: {}\n      };\n\n      for (name in list) {\n        data = list[name];\n        add = data.browsers.map(function (i) {\n          var params;\n          params = i.split(' ');\n          return {\n            browser: params[0] + ' ' + params[1],\n            note: params[2]\n          };\n        });\n        notes = add.filter(function (i) {\n          return i.note;\n        }).map(function (_this) {\n          return function (i) {\n            return _this.browsers.prefix(i.browser) + ' ' + i.note;\n          };\n        }(this));\n        notes = utils.uniq(notes);\n        add = add.filter(function (_this) {\n          return function (i) {\n            return _this.browsers.isSelected(i.browser);\n          };\n        }(this)).map(function (_this) {\n          return function (i) {\n            var prefix;\n            prefix = _this.browsers.prefix(i.browser);\n\n            if (i.note) {\n              return prefix + ' ' + i.note;\n            } else {\n              return prefix;\n            }\n          };\n        }(this));\n        add = this.sort(utils.uniq(add));\n        all = data.browsers.map(function (_this) {\n          return function (i) {\n            return _this.browsers.prefix(i);\n          };\n        }(this));\n\n        if (data.mistakes) {\n          all = all.concat(data.mistakes);\n        }\n\n        all = all.concat(notes);\n        all = utils.uniq(all);\n\n        if (add.length) {\n          selected.add[name] = add;\n\n          if (add.length < all.length) {\n            selected.remove[name] = all.filter(function (i) {\n              return add.indexOf(i) === -1;\n            });\n          }\n        } else {\n          selected.remove[name] = all;\n        }\n      }\n\n      return selected;\n    };\n\n    Prefixes.prototype.sort = function (prefixes) {\n      return prefixes.sort(function (a, b) {\n        var aLength, bLength;\n        aLength = utils.removeNote(a).length;\n        bLength = utils.removeNote(b).length;\n\n        if (aLength === bLength) {\n          return b.length - a.length;\n        } else {\n          return bLength - aLength;\n        }\n      });\n    };\n\n    Prefixes.prototype.preprocess = function (selected) {\n      var add, name, old, olds, prefix, prefixed, prefixes, prop, props, remove, selector, value, values, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref, _ref1, _ref2;\n\n      add = {\n        selectors: [],\n        '@supports': new Supports(this)\n      };\n      _ref = selected.add;\n\n      for (name in _ref) {\n        prefixes = _ref[name];\n\n        if (name === '@keyframes') {\n          add[name] = new Keyframes(name, prefixes, this);\n        } else if (this.data[name].selector) {\n          add.selectors.push(Selector.load(name, prefixes, this));\n        } else {\n          props = this.data[name].transition ? this.transitionProps : this.data[name].props;\n\n          if (props) {\n            value = Value.load(name, prefixes, this);\n\n            for (_i = 0, _len = props.length; _i < _len; _i++) {\n              prop = props[_i];\n\n              if (!add[prop]) {\n                add[prop] = {\n                  values: []\n                };\n              }\n\n              add[prop].values.push(value);\n            }\n          }\n\n          if (!this.data[name].props) {\n            values = ((_ref1 = add[name]) != null ? _ref1.values : void 0) || [];\n            add[name] = Declaration.load(name, prefixes, this);\n            add[name].values = values;\n          }\n        }\n      }\n\n      remove = {\n        selectors: []\n      };\n      _ref2 = selected.remove;\n\n      for (name in _ref2) {\n        prefixes = _ref2[name];\n\n        if (this.data[name].selector) {\n          selector = Selector.load(name, prefixes);\n\n          for (_j = 0, _len1 = prefixes.length; _j < _len1; _j++) {\n            prefix = prefixes[_j];\n            remove.selectors.push(selector.old(prefix));\n          }\n        } else if (name[0] === '@') {\n          for (_k = 0, _len2 = prefixes.length; _k < _len2; _k++) {\n            prefix = prefixes[_k];\n            prefixed = '@' + prefix + name.slice(1);\n            remove[prefixed] = {\n              remove: true\n            };\n          }\n        } else {\n          props = this.data[name].transition ? this.transitionProps : this.data[name].props;\n\n          if (props) {\n            value = Value.load(name, [], this);\n\n            for (_l = 0, _len3 = prefixes.length; _l < _len3; _l++) {\n              prefix = prefixes[_l];\n              old = value.old(prefix);\n\n              if (old) {\n                for (_m = 0, _len4 = props.length; _m < _len4; _m++) {\n                  prop = props[_m];\n\n                  if (!remove[prop]) {\n                    remove[prop] = {};\n                  }\n\n                  if (!remove[prop].values) {\n                    remove[prop].values = [];\n                  }\n\n                  remove[prop].values.push(old);\n                }\n              }\n            }\n          }\n\n          if (!this.data[name].props) {\n            for (_n = 0, _len5 = prefixes.length; _n < _len5; _n++) {\n              prefix = prefixes[_n];\n              prop = vendor.unprefixed(name);\n              olds = this.decl(name).old(name, prefix);\n\n              for (_o = 0, _len6 = olds.length; _o < _len6; _o++) {\n                prefixed = olds[_o];\n\n                if (!remove[prefixed]) {\n                  remove[prefixed] = {};\n                }\n\n                remove[prefixed].remove = true;\n              }\n            }\n          }\n        }\n      }\n\n      return [add, remove];\n    };\n\n    Prefixes.prototype.decl = function (prop) {\n      var decl;\n      decl = declsCache[prop];\n\n      if (decl) {\n        return decl;\n      } else {\n        return declsCache[prop] = Declaration.load(prop);\n      }\n    };\n\n    Prefixes.prototype.unprefixed = function (prop) {\n      prop = vendor.unprefixed(prop);\n      return this.decl(prop).normalize(prop);\n    };\n\n    Prefixes.prototype.prefixed = function (prop, prefix) {\n      prop = vendor.unprefixed(prop);\n      return this.decl(prop).prefixed(prop, prefix);\n    };\n\n    Prefixes.prototype.values = function (type, prop) {\n      var data, global, values, _ref, _ref1;\n\n      data = this[type];\n      global = (_ref = data['*']) != null ? _ref.values : void 0;\n      values = (_ref1 = data[prop]) != null ? _ref1.values : void 0;\n\n      if (global && values) {\n        return utils.uniq(global.concat(values));\n      } else {\n        return global || values || [];\n      }\n    };\n\n    Prefixes.prototype.group = function (decl) {\n      var checker, index, length, rule, unprefixed;\n      rule = decl.parent;\n      index = rule.index(decl);\n      length = rule.decls.length;\n      unprefixed = this.unprefixed(decl.prop);\n\n      checker = function (_this) {\n        return function (step, callback) {\n          var other;\n          index += step;\n\n          while (index >= 0 && index < length) {\n            other = rule.decls[index];\n\n            if (other.type === 'decl') {\n              if (step === -1 && other.prop === unprefixed) {\n                if (!Browsers.withPrefix(other.value)) {\n                  break;\n                }\n              }\n\n              if (_this.unprefixed(other.prop) !== unprefixed) {\n                break;\n              } else if (callback(other) === true) {\n                return true;\n              }\n\n              if (step === +1 && other.prop === unprefixed) {\n                if (!Browsers.withPrefix(other.value)) {\n                  break;\n                }\n              }\n            }\n\n            index += step;\n          }\n\n          return false;\n        };\n      }(this);\n\n      return {\n        up: function up(callback) {\n          return checker(-1, callback);\n        },\n        down: function down(callback) {\n          return checker(+1, callback);\n        }\n      };\n    };\n\n    return Prefixes;\n  }();\n\n  module.exports = Prefixes;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}