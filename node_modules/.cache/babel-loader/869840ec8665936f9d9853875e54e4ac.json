{"ast":null,"code":"(function () {\n  var Keyframes,\n      Prefixer,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  Prefixer = require('./prefixer');\n\n  Keyframes = function (_super) {\n    __extends(Keyframes, _super);\n\n    function Keyframes() {\n      return Keyframes.__super__.constructor.apply(this, arguments);\n    }\n\n    Keyframes.prototype.add = function (atRule, prefix) {\n      var already, cloned, prefixed;\n      prefixed = prefix + atRule.name;\n      already = atRule.parent.some(function (i) {\n        return i.name === prefixed && i.params === atRule.params;\n      });\n\n      if (already) {\n        return;\n      }\n\n      cloned = this.clone(atRule, {\n        name: prefixed\n      });\n      return atRule.parent.insertBefore(atRule, cloned);\n    };\n\n    Keyframes.prototype.process = function (node) {\n      var parent, prefix, _i, _len, _ref, _results;\n\n      parent = this.parentPrefix(node);\n      _ref = this.prefixes;\n      _results = [];\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        prefix = _ref[_i];\n\n        if (parent && parent !== prefix) {\n          continue;\n        }\n\n        _results.push(this.add(node, prefix));\n      }\n\n      return _results;\n    };\n\n    return Keyframes;\n  }(Prefixer);\n\n  module.exports = Keyframes;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}