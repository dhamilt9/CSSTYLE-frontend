{"ast":null,"code":"// Error while CSS parsing\nvar CssSyntaxError = function (super$0) {\n  var DP$0 = Object.defineProperty;\n\n  var MIXIN$0 = function MIXIN$0(t, s) {\n    for (var p in s) {\n      if (s.hasOwnProperty(p)) {\n        DP$0(t, p, Object.getOwnPropertyDescriptor(s, p));\n      }\n    }\n\n    return t;\n  };\n\n  \"use strict\";\n\n  MIXIN$0(CssSyntaxError, super$0);\n\n  function CssSyntaxError(text, source, pos, file) {\n    this.file = file;\n    this.line = pos.line;\n    this.column = pos.column;\n    this.source = source;\n    this.message = \"Can't parse CSS: \" + text;\n    this.message += ' at line ' + pos.line + ':' + pos.column;\n    if (file) this.message += ' in ' + file;\n  }\n\n  CssSyntaxError.prototype = Object.create(super$0.prototype, {\n    \"constructor\": {\n      \"value\": CssSyntaxError,\n      \"configurable\": true,\n      \"writable\": true\n    }\n  });\n  DP$0(CssSyntaxError, \"prototype\", {\n    \"configurable\": false,\n    \"enumerable\": false,\n    \"writable\": false\n  });\n\n  CssSyntaxError.prototype.highlight = function (color) {\n    var num = this.line - 1;\n    var lines = this.source.split('\\n');\n    var prev = num > 0 ? lines[num - 1] + '\\n' : '';\n    var broken = lines[num];\n    var next = num < lines.length - 1 ? '\\n' + lines[num + 1] : '';\n    var mark = '\\n';\n\n    for (var i = 0; i < this.column - 1; i++) {\n      mark += ' ';\n    }\n\n    if (typeof color == 'undefined' && typeof process != 'undefined') {\n      if (process.stdout && process.env) {\n        color = process.stdout.isTTY && !process.env.NODE_DISABLE_COLORS;\n      }\n    }\n\n    if (color) {\n      mark += \"\\x1B[1;31m^\\x1B[0m\";\n    } else {\n      mark += '^';\n    }\n\n    return prev + broken + mark + next;\n  };\n\n  CssSyntaxError.prototype.toString = function () {\n    return this.message + \"\\n\" + this.highlight();\n  };\n\n  return CssSyntaxError;\n}(Error);\n\nmodule.exports = CssSyntaxError;","map":null,"metadata":{},"sourceType":"script"}