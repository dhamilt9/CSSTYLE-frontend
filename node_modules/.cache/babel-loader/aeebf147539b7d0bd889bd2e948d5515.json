{"ast":null,"code":"var Container = require('./container'); // CSS at-rule like “this.keyframes name { }”.\n//\n// Can contain declarations (like this.font-face or this.page) ot another rules.\n\n\nvar AtRule = function (super$0) {\n  var DP$0 = Object.defineProperty;\n\n  var MIXIN$0 = function MIXIN$0(t, s) {\n    for (var p in s) {\n      if (s.hasOwnProperty(p)) {\n        DP$0(t, p, Object.getOwnPropertyDescriptor(s, p));\n      }\n    }\n\n    return t;\n  };\n\n  \"use strict\";\n\n  MIXIN$0(AtRule, super$0);\n\n  function AtRule(defaults) {\n    this.type = 'atrule';\n    super$0.call(this, defaults);\n  }\n\n  AtRule.prototype = Object.create(super$0.prototype, {\n    \"constructor\": {\n      \"value\": AtRule,\n      \"configurable\": true,\n      \"writable\": true\n    }\n  });\n  DP$0(AtRule, \"prototype\", {\n    \"configurable\": false,\n    \"enumerable\": false,\n    \"writable\": false\n  }); // Different style for this.encoding and this.page at-rules.\n\n  AtRule.prototype.styleType = function () {\n    return this.type + (this.rules || this.decls ? '-body' : '-bodiless');\n  };\n\n  AtRule.prototype.defaultStyle = function (type) {\n    if (type == 'atrule-body') {\n      return {\n        between: ' ',\n        after: this.defaultAfter()\n      };\n    } else {\n      return {\n        between: ''\n      };\n    }\n  }; // Load into at-rule mixin for selected content type\n\n\n  AtRule.prototype.addMixin = function (type) {\n    var mixin = type == 'rules' ? Container.WithRules : Container.WithDecls;\n    if (!mixin) return;\n\n    for (var name in mixin.prototype) {\n      if (name == 'constructor') continue;\n      var value = mixin.prototype[name];\n      var container = Container.prototype[name] == value;\n      var detector = name == 'append' || name == 'prepend';\n      if (container && !detector) continue;\n      this[name] = value;\n    }\n\n    mixin.apply(this);\n  }; // Stringify at-rule\n\n\n  AtRule.prototype.stringify = function (builder, last) {\n    var style = this.style();\n    var name = '@' + this.name;\n    var params = this.params ? this.stringifyRaw('params') : '';\n\n    if (typeof this.afterName != 'undefined') {\n      name += this.afterName;\n    } else if (params) {\n      name += ' ';\n    }\n\n    if (this.rules || this.decls) {\n      this.stringifyBlock(builder, name + params + style.between + '{');\n    } else {\n      if (this.before) builder(this.before);\n      var semicolon = !last || this.semicolon ? ';' : '';\n      builder(name + params + style.between + semicolon, this);\n    }\n  }; // Hack to detect container type by child type\n\n\n  AtRule.prototype.append = function (child) {\n    var mixin = child.type == 'decl' ? 'decls' : 'rules';\n    this.addMixin(mixin);\n    return this.append(child);\n  }; // Hack to detect container type by child type\n\n\n  AtRule.prototype.prepend = function (child) {\n    var mixin = child.type == 'decl' ? 'decls' : 'rules';\n    this.addMixin(mixin);\n    return this.prepend(child);\n  };\n\n  return AtRule;\n}(Container);\n\nmodule.exports = AtRule;","map":null,"metadata":{},"sourceType":"script"}