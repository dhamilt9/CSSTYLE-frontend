{"ast":null,"code":"(function () {\n  var Browsers, Prefixer, utils, vendor;\n  Browsers = require('./browsers');\n  vendor = require('postcss/lib/vendor');\n  utils = require('./utils');\n\n  Prefixer = function () {\n    Prefixer.hack = function (klass) {\n      var name, _i, _len, _ref, _results;\n\n      this.hacks || (this.hacks = {});\n      _ref = klass.names;\n      _results = [];\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        name = _ref[_i];\n\n        _results.push(this.hacks[name] = klass);\n      }\n\n      return _results;\n    };\n\n    Prefixer.load = function (name, prefixes, all) {\n      var klass, _ref;\n\n      klass = (_ref = this.hacks) != null ? _ref[name] : void 0;\n\n      if (klass) {\n        return new klass(name, prefixes, all);\n      } else {\n        return new this(name, prefixes, all);\n      }\n    };\n\n    Prefixer.clone = function (node, overrides) {\n      var cloned;\n      cloned = node.clone(overrides);\n\n      if (node.type === 'decl') {\n        cloned.between = node.between;\n      }\n\n      delete cloned._autoprefixerPrefix;\n      delete cloned._autoprefixerValues;\n      return cloned;\n    };\n\n    function Prefixer(name, prefixes, all) {\n      this.name = name;\n      this.prefixes = prefixes;\n      this.all = all;\n    }\n\n    Prefixer.prototype.parentPrefix = function (node) {\n      var prefix;\n      prefix = node._autoprefixerPrefix != null ? node._autoprefixerPrefix : node.type === 'decl' && node.prop[0] === '-' ? vendor.prefix(node.prop) : node.type === 'root' ? false : node.type === 'rule' && node.selector.indexOf(':-') !== -1 ? node.selector.match(/:(-\\w+-)/)[1] : node.type === 'atrule' && node.name[0] === '-' ? vendor.prefix(node.name) : this.parentPrefix(node.parent);\n\n      if (Browsers.prefixes().indexOf(prefix) === -1) {\n        prefix = false;\n      }\n\n      return node._autoprefixerPrefix = prefix;\n    };\n\n    Prefixer.prototype.process = function (node) {\n      var added, parent, prefix, prefixes, _i, _j, _len, _len1, _ref;\n\n      if (!this.check(node)) {\n        return;\n      }\n\n      parent = this.parentPrefix(node);\n      prefixes = [];\n      _ref = this.prefixes;\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        prefix = _ref[_i];\n\n        if (parent && parent !== utils.removeNote(prefix)) {\n          continue;\n        }\n\n        prefixes.push(prefix);\n      }\n\n      added = [];\n\n      for (_j = 0, _len1 = prefixes.length; _j < _len1; _j++) {\n        prefix = prefixes[_j];\n\n        if (this.add(node, prefix, added.concat([prefix]))) {\n          added.push(prefix);\n        }\n      }\n\n      return added;\n    };\n\n    Prefixer.prototype.clone = function (node, overrides) {\n      return Prefixer.clone(node, overrides);\n    };\n\n    return Prefixer;\n  }();\n\n  module.exports = Prefixer;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}