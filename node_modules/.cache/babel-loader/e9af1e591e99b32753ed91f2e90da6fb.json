{"ast":null,"code":"var _ = require(\"lodash\");\n\nvar assert = require(\"assert\");\n\nvar parse = require(\"css-parse\");\n\nvar toCamelCase = require(\"to-camel-case\");\n\nvar autoprefixer = require(\"autoprefixer\");\n/**\r\n * Process a CSS rule (without a selector) into a React-style\r\n * camelCase properties map with proper vendor prefixing.\r\n * Autoprefixing can be optionally disabled.\r\n * @param {String} css Single CSS rule without selector.\r\n * @param {boolean} autoprefix If set to false, disable autoprefixing. Defaults to 'true'.\r\n * @return {Object.<String, String>}\r\n * @public\r\n */\n\n\nvar fromCSS = function fromCSS(css, autoprefix) {\n  if (autoprefix === undefined) {\n    autoprefix = true;\n  }\n  /* Prepend a dummy selector to allow proper parsing */\n\n\n  css = \"*\" + css;\n\n  if (autoprefix) {\n    css = autoprefixer.process(css).css;\n  }\n\n  var rules = {};\n  var parsed = parse(css);\n  /* Assert only one rule was passed. */\n\n  assert(_.size(parsed.stylesheet.rules) === 1);\n\n  _.each(parsed.stylesheet.rules, function (rule) {\n    if (rule.type === \"rule\") {\n      _.each(rule.declarations, function (decl) {\n        if (decl.type === \"declaration\") {\n          rules[toCamelCase(decl.property)] = decl.value;\n        }\n      });\n    }\n  });\n\n  return rules;\n};\n\nmodule.exports = fromCSS;","map":null,"metadata":{},"sourceType":"script"}