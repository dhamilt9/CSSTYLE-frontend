{"ast":null,"code":"(function () {\n  var Browsers,\n      Declaration,\n      Prefixer,\n      utils,\n      vendor,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  Prefixer = require('./prefixer');\n  Browsers = require('./browsers');\n  vendor = require('postcss/lib/vendor');\n  utils = require('./utils');\n\n  Declaration = function (_super) {\n    __extends(Declaration, _super);\n\n    function Declaration() {\n      return Declaration.__super__.constructor.apply(this, arguments);\n    }\n\n    Declaration.prototype.check = function (decl) {\n      return true;\n    };\n\n    Declaration.prototype.prefixed = function (prop, prefix) {\n      return prefix + prop;\n    };\n\n    Declaration.prototype.normalize = function (prop) {\n      return prop;\n    };\n\n    Declaration.prototype.otherPrefixes = function (value, prefix) {\n      var other, _i, _len, _ref;\n\n      _ref = Browsers.prefixes();\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        other = _ref[_i];\n\n        if (other === prefix) {\n          continue;\n        }\n\n        if (value.indexOf(other) !== -1) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    Declaration.prototype.set = function (decl, prefix) {\n      decl.prop = this.prefixed(decl.prop, prefix);\n      return decl;\n    };\n\n    Declaration.prototype.needCascade = function (decl) {\n      return decl._autoprefixerCascade || (decl._autoprefixerCascade = this.all.options.cascade !== false && decl.before.indexOf(\"\\n\") !== -1);\n    };\n\n    Declaration.prototype.maxPrefixed = function (prefixes, decl) {\n      var max, prefix, _i, _len;\n\n      if (decl._autoprefixerMax) {\n        return decl._autoprefixerMax;\n      }\n\n      max = 0;\n\n      for (_i = 0, _len = prefixes.length; _i < _len; _i++) {\n        prefix = prefixes[_i];\n        prefix = utils.removeNote(prefix);\n\n        if (prefix.length > max) {\n          max = prefix.length;\n        }\n      }\n\n      return decl._autoprefixerMax = max;\n    };\n\n    Declaration.prototype.calcBefore = function (prefixes, decl, prefix) {\n      var before, diff, i, max, _i;\n\n      if (prefix == null) {\n        prefix = '';\n      }\n\n      before = decl.before;\n      max = this.maxPrefixed(prefixes, decl);\n      diff = max - utils.removeNote(prefix).length;\n\n      for (i = _i = 0; 0 <= diff ? _i < diff : _i > diff; i = 0 <= diff ? ++_i : --_i) {\n        before += ' ';\n      }\n\n      return before;\n    };\n\n    Declaration.prototype.restoreBefore = function (decl) {\n      var lines, min;\n      lines = decl.before.split(\"\\n\");\n      min = lines[lines.length - 1];\n      this.all.group(decl).up(function (prefixed) {\n        var array, last;\n        array = prefixed.before.split(\"\\n\");\n        last = array[array.length - 1];\n\n        if (last.length < min.length) {\n          return min = last;\n        }\n      });\n      lines[lines.length - 1] = min;\n      return decl.before = lines.join(\"\\n\");\n    };\n\n    Declaration.prototype.insert = function (decl, prefix, prefixes) {\n      var cloned;\n      cloned = this.set(this.clone(decl), prefix);\n\n      if (!cloned) {\n        return;\n      }\n\n      if (this.needCascade(decl)) {\n        cloned.before = this.calcBefore(prefixes, decl, prefix);\n      }\n\n      return decl.parent.insertBefore(decl, cloned);\n    };\n\n    Declaration.prototype.add = function (decl, prefix, prefixes) {\n      var already, prefixed;\n      prefixed = this.prefixed(decl.prop, prefix);\n      already = this.all.group(decl).up(function (i) {\n        return i.prop === prefixed;\n      });\n      already || (already = this.all.group(decl).down(function (i) {\n        return i.prop === prefixed;\n      }));\n\n      if (already || this.otherPrefixes(decl.value, prefix)) {\n        return;\n      }\n\n      return this.insert(decl, prefix, prefixes);\n    };\n\n    Declaration.prototype.process = function (decl) {\n      var prefixes;\n\n      if (this.needCascade(decl)) {\n        prefixes = Declaration.__super__.process.apply(this, arguments);\n\n        if (prefixes != null ? prefixes.length : void 0) {\n          this.restoreBefore(decl);\n          return decl.before = this.calcBefore(prefixes, decl);\n        }\n      } else {\n        return Declaration.__super__.process.apply(this, arguments);\n      }\n    };\n\n    Declaration.prototype.old = function (prop, prefix) {\n      return [this.prefixed(prop, prefix)];\n    };\n\n    return Declaration;\n  }(Prefixer);\n\n  module.exports = Declaration;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}