{"ast":null,"code":"(function () {\n  var Declaration,\n      TransformDecl,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  Declaration = require('../declaration');\n\n  TransformDecl = function (_super) {\n    __extends(TransformDecl, _super);\n\n    function TransformDecl() {\n      return TransformDecl.__super__.constructor.apply(this, arguments);\n    }\n\n    TransformDecl.names = ['transform', 'transform-origin'];\n    TransformDecl.functions3d = ['matrix3d', 'translate3d', 'translateZ', 'scale3d', 'scaleZ', 'rotate3d', 'rotateX', 'rotateY', 'rotateZ', 'perspective'];\n\n    TransformDecl.prototype.keykrameParents = function (decl) {\n      var parent;\n      parent = decl.parent;\n\n      while (parent) {\n        if (parent.type === 'atrule' && parent.name === 'keyframes') {\n          return true;\n        }\n\n        parent = parent.parent;\n      }\n\n      return false;\n    };\n\n    TransformDecl.prototype.contain3d = function (decl) {\n      var func, _i, _len, _ref;\n\n      if (decl.prop === 'transform-origin') {\n        return false;\n      }\n\n      _ref = TransformDecl.functions3d;\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        func = _ref[_i];\n\n        if (decl.value.indexOf(\"\" + func + \"(\") !== -1) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    TransformDecl.prototype.insert = function (decl, prefix, prefixes) {\n      if (prefix === '-ms-') {\n        if (!this.contain3d(decl) && !this.keykrameParents(decl)) {\n          return TransformDecl.__super__.insert.apply(this, arguments);\n        }\n      } else if (prefix === '-o-') {\n        if (!this.contain3d(decl)) {\n          return TransformDecl.__super__.insert.apply(this, arguments);\n        }\n      } else {\n        return TransformDecl.__super__.insert.apply(this, arguments);\n      }\n    };\n\n    return TransformDecl;\n  }(Declaration);\n\n  module.exports = TransformDecl;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}