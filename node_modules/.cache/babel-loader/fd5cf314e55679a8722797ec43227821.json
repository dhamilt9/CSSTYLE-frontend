{"ast":null,"code":"var mozilla = require('source-map');\n\nvar Base64 = require('js-base64').Base64;\n\nvar path = require('path');\n\nvar fs = require('fs'); // Detect previous map\n\n\nvar PreviousMap = function () {\n  var DP$0 = Object.defineProperty;\n  \"use strict\";\n\n  function PreviousMap(root, opts, id) {\n    this.file = opts.from || id;\n    this.loadAnnotation(root);\n    var inlinePrefix = '# sourceMappingURL=data:';\n    this.inline = this.startWith(this.annotation, inlinePrefix);\n    var text = this.loadMap(opts.map ? opts.map.prev : undefined);\n    if (text) this.text = text;\n  }\n\n  DP$0(PreviousMap, \"prototype\", {\n    \"configurable\": false,\n    \"enumerable\": false,\n    \"writable\": false\n  }); // Return SourceMapConsumer object to read map\n\n  PreviousMap.prototype.consumer = function () {\n    if (!this.consumerCache) {\n      this.consumerCache = new mozilla.SourceMapConsumer(this.text);\n    }\n\n    return this.consumerCache;\n  }; // Is map has sources content\n\n\n  PreviousMap.prototype.withContent = function () {\n    return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);\n  }; // Is `string` is starting with `start`\n\n\n  PreviousMap.prototype.startWith = function (string, start) {\n    if (!string) return false;\n    return string.substr(0, start.length) == start;\n  }; // Load for annotation comment from previous compilation step\n\n\n  PreviousMap.prototype.loadAnnotation = function (root) {\n    var last = root.last;\n    if (!last) return;\n    if (last.type != 'comment') return;\n\n    if (this.startWith(last.text, '# sourceMappingURL=')) {\n      this.annotation = last.text;\n    }\n  }; // Encode different type of inline\n\n\n  PreviousMap.prototype.decodeInline = function (text) {\n    var uri = '# sourceMappingURL=data:application/json,';\n    var base64 = '# sourceMappingURL=data:application/json;base64,';\n\n    if (this.startWith(text, uri)) {\n      return decodeURIComponent(text.substr(uri.length));\n    } else if (this.startWith(text, base64)) {\n      return Base64.decode(text.substr(base64.length));\n    } else {\n      var encoding = text.match(/ata:application\\/json;([^,]+),/)[1];\n      throw new Error('Unsupported source map encoding ' + encoding);\n    }\n  }; // Load previous map\n\n\n  PreviousMap.prototype.loadMap = function (prev) {\n    if (prev === false) return;\n\n    if (prev) {\n      if (typeof prev == 'string') {\n        return prev;\n      } else if (prev instanceof mozilla.SourceMapConsumer) {\n        return mozilla.SourceMapGenerator.fromSourceMap(prev).toString();\n      } else if (prev instanceof mozilla.SourceMapGenerator) {\n        return prev.toString();\n      } else if (typeof prev == 'object' && prev.mappings) {\n        return JSON.stringify(prev);\n      } else {\n        throw new Error('Unsupported previous source map format: ' + prev.toString());\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation);\n    } else if (this.annotation) {\n      var map = this.annotation.replace('# sourceMappingURL=', '');\n      if (this.file) map = path.join(path.dirname(this.file), map);\n      this.root = path.dirname(map);\n\n      if (fs.existsSync && fs.existsSync(map)) {\n        return fs.readFileSync(map, 'utf-8').toString();\n      }\n    }\n  };\n\n  return PreviousMap;\n}();\n\nmodule.exports = PreviousMap;","map":null,"metadata":{},"sourceType":"script"}